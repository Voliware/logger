class Logger{constructor(e,t={}){return this.name=e,this.options={level:Logger.level.info,context:null,objectsToString:!1,timestamp:{state:!1,format:Logger.timestamp.locale}},Object.extend(this.options,t),this.setLogLevel(this.options.level),this.setTimestamp(this.options.timestamp),this}setName(e){return this.name=e,this}setLogLevel(e){return"string"==typeof e&&(e=Logger.level.stringmap.get(e)),Logger.level.isValidLevel(e)?(this.options.level=e,this):(console.error("Logger.setLogLevel: invalid log level"),this)}setTimestamp(e){return"boolean"==typeof e&&(this.options.timestamp={state:e,format:Logger.timestamp.locale}),this.setTimestampState(this.options.timestamp.state),this.setTimestampFormat(this.options.timestamp.format),this}setTimestampState(e){return this.options.timestamp.state=e,this}setTimestampFormat(e){if("string"==typeof e&&(e=Logger.timestamp.stringmap.get(e)),!Logger.timestamp.isValidTimestamp(e))return console.error("Logger.setTimestampFormat: invalid timestamp"),this;switch(e){case Logger.timestamp.utc:this.appendTimestamp=this.appendUtcTimestamp;break;case Logger.timestamp.localedate:this.appendTimestamp=this.appendLocaleDateTimestamp;break;case Logger.timestamp.localetime:this.appendTimestamp=this.appendLocaleTimeTimestamp;break;case Logger.timestamp.locale:default:this.appendTimestamp=this.appendLocaleTimestamp}return this}setCustomTimestampFormat(e){return this.appendTimestamp=e,this}appendUtcTimestamp(){return`[${(new Date).toUTCString()}] `}appendLocaleTimestamp(){return`[${(new Date).toLocaleString()}] `}appendLocaleTimeTimestamp(){return`[${(new Date).toLocaleTimeString()}] `}appendLocaleDateTimestamp(){return`[${(new Date).toLocaleDateString()}] `}createMessage(e,t){let s="";return this.options.timestamp.state&&(s+=this.appendTimestamp()),s+=`[${Logger.level.string[t]}] `,s+=`[${this.name}] `,this.options.context&&(s+=`[${this.options.context}] `),"string"==typeof e&&(s+=e),s}log(e,t=this.options.level){if(t<this.options.level)return this;let s="string"==typeof e?this.createMessage(e,t):e;return this.logMessage(s)}logMessage(e){return"object"==typeof e&&this.options.objectsToString?console.log(e.toString()):console.log(e),this}verbose(e){return this.log(e,Logger.level.verbose)}debug(e){return this.log(e,Logger.level.debug)}info(e){return this.log(e,Logger.level.info)}warning(e){return this.log(e,Logger.level.warning)}error(e){return this.log(e,Logger.level.error)}}Logger.level={verbose:0,debug:1,info:2,warning:3,error:4,string:["VRB","DBG","INF","WRN","ERR"]},Logger.level.stringmap=(new Map).set("verbose",Logger.level.verbose).set("debug",Logger.level.debug).set("info",Logger.level.info).set("warning",Logger.level.warning).set("error",Logger.level.error),Logger.level.isValidLevel=function(e){return e>=Logger.level.verbose&&e<=Logger.level.error},Logger.timestamp={utc:0,locale:1,localetime:2,localedate:3},Logger.timestamp.stringmap=(new Map).set("utc",Logger.timestamp.utc).set("locale",Logger.timestamp.locale).set("localetime",Logger.timestamp.localetime).set("localedate",Logger.timestamp.localedate),Logger.timestamp.isValidTimestamp=function(e){return e>=Logger.timestamp.utc&&e<=Logger.timestamp.localedate},"function"!=typeof Object.extend&&(Object.extend=function(){for(let e=1;e<arguments.length;e++)for(let t in arguments[e])if(arguments[e].hasOwnProperty(t)){if(!arguments[0])continue;"object"==typeof arguments[0][t]&&"object"==typeof arguments[e][t]?Object.extend(arguments[0][t],arguments[e][t]):arguments[0][t]=arguments[e][t]}return arguments[0]}),"undefined"!=typeof module&&(module.exports=Logger);